# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/167jnrwNU-FZ81tnV4wtoy3Z1BEhkTXj8
"""

import cv2
import numpy as np
from matplotlib import pyplot as plt

from google.colab.patches import cv2_imshow
!gdown --id '1szDHqlwLdqLzlns2ceLi2fKNxwoPrb9c' --output 207410423.jpg
!gdown --id '1W3NVp0fSbYgyUR4E5zJYk76Wm8Na4cg2' --output temp.jpg
!gdown --id '1NYxzWP3-4Icu43R2AOXzUxZPUDQgajHh' --output DirtyAnna.jpg
!gdown --id '1KS-X6AmvoypqudF44IZuVE4CIfttG19V' --output eyes.jpg
!gdown --id '1-0KYc8hrrX3uXxluoGxrFYehQm1gTNOX' --output man.png
!gdown --id '1bXwriuLagbR9CtexzcWywPzNHYINqp4u' --output yoda.jpeg
!gdown --id '1eawkET72l86jIvCQiyPqlm2VFohh8Hos' --output background.jpg

img = cv2.imread('temp.jpg')
cv2_imshow(img)
color = ('b','g','r')
for i, col in enumerate(color):
  histr = cv2.calcHist([img],[i],None,[256],[0, 256])
  plt.plot(histr, color = col)
  plt.xlim([0, 256])
plt.show()
img1 = img.copy()
img2 = img.copy()
img3 = img.copy()

img1[:,:,0]=0
img1[:,:,1]=0

img2[:,:,0]=0
img2[:,:,2]=0

img3[:,:,1]=0
img3[:,:,2]=0

concat_img=cv2.hconcat([img,img1,img2,img3])
cv2_imshow(concat_img)

imgray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
hist = cv2.calcHist([imgray], [0], None, [256], [0, 256])
#cv2_imshow(imgray)
plt.plot(hist)
ret,imgbw = cv2.threshold(imgray,110,255,cv2.THRESH_BINARY)
imgCanny = cv2.Canny(imgbw,100,200)

c_i2=cv2.hconcat([imgray,imgbw,imgCanny])
cv2_imshow(c_i2)

grad_x = cv2.Sobel(imgray, cv2.CV_16S, 1, 0, ksize=3, scale=1, delta=0, borderType=cv2.BORDER_DEFAULT)
grad_y = cv2.Sobel(imgray, cv2.CV_16S, 0, 1, ksize=3, scale=1, delta=0, borderType=cv2.BORDER_DEFAULT)

abs_grad_x = cv2.convertScaleAbs(grad_x)
abs_grad_y = cv2.convertScaleAbs(grad_y)
concat_grad_xy=cv2.hconcat([abs_grad_x,abs_grad_y])
cv2_imshow(concat_grad_xy)

grad = cv2.addWeighted(abs_grad_x, 0.5, abs_grad_y, 0.5, 0)

cv2_imshow(grad)

for i in range(imgray.shape[0]):
  for j in range(imgray.shape[1]):
    if imgray[i,j] > 75:
      imgray[i,j]=255
    else:
      imgray[i,j]=0
cv2_imshow(imgray)

def iblur(input):
  kernel=np.ones((3,3),np.float32)/9
  blur_img = cv2.filter2D(input,-1,kernel)
  return blur_img
def igaussian_blur(input):
  kernel = np.ones((3,3),np.float32)
  #kernel = [[1/16,1/8,1/16],[1/4,1/8,1/8],[1/16,1/8,1/16]]
  kernel[0,0]=1/16
  kernel[0,1]=1/8
  kernel[0,2]=1/16
  kernel[1,0]=1/8
  kernel[1,1]=1/4
  kernel[1,2]=1/8
  kernel[2,0]=1/16
  kernel[2,1]=1/8
  kernel[2,2]=1/16
  blur_img = cv2.filter2D(input,-1,kernel)
  return blur_img

dirtyimg=cv2.imread('DirtyAnna.jpg')
clearimg=cv2.medianBlur(dirtyimg,3)
blurimg=cv2.blur(dirtyimg,(3,3))
ourblur=iblur(dirtyimg)
ourgaussian=igaussian_blur(dirtyimg)
gauimg=cv2.GaussianBlur(dirtyimg,(3,3),0)
cv2.putText(clearimg,"medianBlur",(0,25),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
cv2.putText(blurimg,"cv2 blur",(0,25),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
cv2.putText(dirtyimg,"original",(0,25),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
cv2.putText(ourblur,"ourblur",(0,25),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
cv2.putText(ourgaussian,"ourgaussian",(0,25),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
cv2.putText(gauimg,"gauimg",(0,25),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
concat_dnc1=cv2.hconcat([dirtyimg,blurimg,ourblur])
concat_dnc2=cv2.hconcat([clearimg,gauimg,ourgaussian])
concat_dnc=cv2.vconcat([concat_dnc1,concat_dnc2])
cv2_imshow(concat_dnc)

def he_our(img):
  hist,bins = np.histogram(img.flatten(),256,[0,256])
  cdf = hist.cumsum()
  cdf_normalized = cdf * float(hist.max()) / cdf.max()
  cdf_m = np.ma.masked_equal(cdf,0)
  cdf_m = (cdf_m - cdf_m.min())*255/(cdf_m.max()-cdf_m.min())
  cdf = np.ma.filled(cdf_m,0).astype('uint8')
  img2 = cdf[img]
  return img2

man=cv2.imread('man.png',0)
man2=he_our(man)
man3=cv2.equalizeHist(man)
clahe=cv2.createCLAHE(clipLimit=45.0,tileGridSize=(8,8))
man4=clahe.apply(man)
fusion=cv2.hconcat([man,man2,man3,man4])

cv2_imshow(fusion)

rgb = cv2.imread('eyes.jpg',-1)
hsv = cv2.cvtColor(rgb,cv2.COLOR_BGR2HSV)
ycrb = cv2.cvtColor(rgb,cv2.COLOR_BGR2YCrCb)

fusion=cv2.hconcat([rgb,hsv,ycrb])
cv2_imshow(fusion)

yoda=cv2.imread('yoda.jpeg',-1)
background=cv2.imread('background.jpg',-1)

nyoda=cv2.resize(yoda,(640,480))
nbg=cv2.resize(background,(640,480))
srcTri = np.array( [[0, 0], [nyoda.shape[1] - 1, 0], [0, nyoda.shape[0] - 1]] ).astype(np.float32)
dstTri = np.array( [[0, nyoda.shape[1]*0.33], [nyoda.shape[1]*0.85, nyoda.shape[0]*0.25], [nyoda.shape[1]*0.15, nyoda.shape[0]*0.7]] ).astype(np.float32)

warp_mat=cv2.getAffineTransform(srcTri,dstTri)
yoda_warp=cv2.warpAffine(nyoda,warp_mat,(nyoda.shape[1],nyoda.shape[0]))

center=(nyoda.shape[1]//2,nyoda.shape[0]//2)
angle=60
scale=1
rot_mat=cv2.getRotationMatrix2D(center,angle,scale)
rotate_nyoda=cv2.warpAffine(nyoda,rot_mat,(nyoda.shape[1],nyoda.shape[0]))

alpha=0.7
beta=1-alpha

shift=np.float32([[1,0,100],[0,1,100]])
shift_yoda_right_down=cv2.warpAffine(nyoda,shift,(nyoda.shape[1],nyoda.shape[0]))

shift=np.float32([[1,0,-100],[0,1,-100]])
shift_yoda_left_up=cv2.warpAffine(nyoda,shift,(nyoda.shape[1],nyoda.shape[0]))

addimg=cv2.addWeighted(yoda_warp,alpha,nbg,beta,0.0)

fusion1=cv2.hconcat([nyoda,shift_yoda_right_down,yoda_warp])
fusion2=cv2.hconcat([nbg,shift_yoda_left_up,addimg])
fusion=cv2.vconcat([fusion1,fusion2])
cv2_imshow(fusion)

